name: CI & CD beta image

on:
    push:
        branches-ignore:
            - master
    workflow_dispatch:

jobs:
    test-unit:
        name: Run unit tests
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.x"

            - name: Install dependencies
              run: |
                  python3 -m pip install --upgrade pip
                  pip3 install -r requirements.txt

            - name: Test with pytest
              run: |
                  python3 -m unittest tests/*.py

    test-sast:
        name: Run SAST tests
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Run gitleaks
              uses: gitleaks/gitleaks-action@v2
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  GITLEAKS_ENABLE_SUMMARY: false

            - name: Install bandit package
              if: always()
              run: pip3 install bandit

            - name: Run bandit
              run: bandit -r . -f html -o bandit-results.html

            - name: Upload bandit results
              if: always()
              uses: actions/upload-artifact@v4
              with:
                name: bandit results
                path: bandit-results.html

    test-dast:
        name: Run DAST tests
        runs-on: ubuntu-latest
        permissions: write-all
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Extract branch name
              shell: bash
              run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
              id: extract_branch

            - name: Deploy with use of SSH
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.SERVER_ADDRESS }}
                  username: ${{ secrets.SERVER_USER }}
                  password: ${{ secrets.SERVER_PASSWORD }}
                  port: 22
                  script: |
                      cd tbo-projekt
                      git checkout ${{ steps.extract_branch.outputs.branch }}
                      git pull
                      docker compose down
                      docker build --build-arg="PORT=5000" -t godot911/tbo-projekt:beta .
                      docker compose up -d

            - name: ZAP Baseline Scan
              uses: zaproxy/action-baseline@v0.10.0
              with:
                  target: ${{ secrets.SERVER_URI }}
                  allow_issue_writing: false
                  fail_action: true

    test-sca:
        name: Run SCA tests
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Run dependency check
              uses: dependency-check/Dependency-Check_Action@main
              with:
                  project: "tbo-projekt"
                  path: "."
                  format: "HTML"
                  out: "reports"
                  args: >
                      --failOnCVSS 5

            - name: Upload dependency check results
              if: always()
              uses: actions/upload-artifact@master
              with:
                  name: Dependency check report
                  path: ${{github.workspace}}/reports

    build:
        name: Build beta image
        needs: [test-sast, test-dast, test-sca, test-unit]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_USER }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build and push
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ./Dockerfile
                  push: true
                  tags: ${{ secrets.DOCKER_USER }}/tbo-projekt:beta
                  build-args: PORT=5000
